{"version":3,"sources":["resources/matthieu-roux-profile.webp","components/coverPicture.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CoverPicture","src","require","alt","className","createHeader1","header","App","contactMeSection","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iMAAAA,EAAOC,QAAU,IAA0B,oD,kFCY5BC,MAVf,WACE,OACE,yBACEC,IAAKC,EAAQ,IACbC,IAAI,mBACJC,UAAU,gBC8DhB,SAASC,EAAcC,GACrB,OACE,6BACE,4BAAQF,UAAU,MAAME,GACxB,yBAAKF,UAAU,kBAING,MAzEf,WACE,IAAMC,EA6BJ,6BACGH,EAAc,gBACf,sCACW,IACT,uBAAGI,KAAK,wCAAwCL,UAAU,OAA1D,kCAGA,6BALF,YAKkB,IAChB,uBAAGK,KAAK,4BAA4BL,UAAU,OAA9C,6BAGA,6BATF,cASoB,IAClB,uBACEK,KAAK,uDACLL,UAAU,OAFZ,0DAvCN,OAqDKC,EAAc,eApDjB,yBAAKD,UAAU,OACb,6BACE,4BAAQA,UAAU,SAAlB,oBACA,yBAAKA,UAAU,mBAAf,KACA,yBAAKA,UAAU,WACb,uBAAGA,UAAU,iBAAb,+MAMA,yBAAKA,UAAU,mBACZJ,IACD,yBAAKI,UAAU,4BACf,yBAAKA,UAAU,8BAKpBI,ICfaE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bcdacb59.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/matthieu-roux-profile.4d8082f7.webp\";","import React from \"react\";\r\n\r\nfunction CoverPicture() {\r\n  return (\r\n    <img\r\n      src={require(\"../resources/matthieu-roux-profile.webp\")}\r\n      alt=\"a cool pic of me\"\r\n      className=\"coverPhoto\"\r\n    ></img>\r\n  );\r\n}\r\n\r\nexport default CoverPicture;\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport CoverPicture from \"./components/coverPicture\";\r\n\r\nfunction App() {\r\n  const contactMeSection = creatContactMeSection();\r\n  const createMyProjects = createMyProjectsSection();\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <header className=\"title\">Hi, I'm Matthieu</header>\r\n        <div className=\"underline-title\"> </div>\r\n        <div className=\"flexRow\">\r\n          <p className=\"limited-width\">\r\n            Hi my name is Matthieu Roux, and thanks for taking the time to visit\r\n            my website! This place is still in construction so I will keep\r\n            adding more things to it. In the meantime, you can find my contact\r\n            info\r\n          </p>\r\n          <div className=\"image-container\">\r\n            {CoverPicture()}\r\n            <div className=\"yellow-cover-decoration\"></div>\r\n            <div className=\"black-cover-decoration\"></div>\r\n            {/* <div className=\"dot-pattern-decoration\"></div> */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {contactMeSection}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction creatContactMeSection() {\r\n  return (\r\n    <div>\r\n      {createHeader1(\"Contact Info\")}\r\n      <p>\r\n        - Email:{\" \"}\r\n        <a href=\"mailto:matthieurouxleoncini@gmail.com\" className=\"url\">\r\n          matthieurouxleoncini@gmail.com\r\n        </a>\r\n        <br />- Github:{\" \"}\r\n        <a href=\"https://github.com/M4TTRX\" className=\"url\">\r\n          https://github.com/M4TTRX\r\n        </a>\r\n        <br />- LinkedIn:{\" \"}\r\n        <a\r\n          href=\"https://www.linkedin.com/in/matthieu-roux-317878153/\"\r\n          className=\"url\"\r\n        >\r\n          https://www.linkedin.com/in/matthieu-roux-317878153/\r\n        </a>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction createMyProjectsSection() {\r\n  return (\r\n    <div>\r\n      {createHeader1(\"My Projects\")}\r\n      <p>\r\n        Wonder what I can make? Here's a list of some of the work I have made\r\n        both for a class and during my free time.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction createHeader1(header) {\r\n  return (\r\n    <div>\r\n      <header className=\"h1\">{header}</header>\r\n      <div className=\"underline-h1\"></div>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}